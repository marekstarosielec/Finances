@using FinancesBlazor.Components.Details;
@inherits LayoutComponentBase
@inject DataViewManager _dataViewManager;
@implements IDisposable;


<PageTitle>Finanse</PageTitle>
<RadzenComponents />
<RadzenDialog />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
       @*  <div class="top-row px-4">
            
        </div> *@

        <article class="content px-4">
            @Body
        </article>
    </main>
    <div class="sidebar2" style="@GetWidth()">
        <FinancesBlazor.Components.Details.Details @ref="details" />
    </div>

</div>
<link rel="stylesheet" href="css/font-awesome/css/fontawesome.min.css" />
<script src="css/font-awesome/js/all.min.js"></script>

@code{
    Details? details;
    int width = 0;

    public string GetWidth()
    {
        return $"width:{width}px";
    }

    protected override void OnInitialized()
    {
        _dataViewManager.DetailsChanged += DetailsChanged;
        _dataViewManager.DetailsExpandChanged += DetailsExpandChanged;
    }

    async void DetailsChanged(object? sender, Dictionary<string, DataView.DataView> checkedRecords)
    {
        if (details == null)
            return;
        if (_dataViewManager.ShowHide && checkedRecords.Count > 0)
            width = 50;
        else
            width = Math.Min(DetailSettings.MaximumNumberOfDetails, checkedRecords.Count) * DetailSettings.DetailsWidth;
        StateHasChanged();
        await details.LoadDetails();

    }

    void DetailsExpandChanged(object? sender, EventArgs e)
    {
        if (_dataViewManager.ShowHide && _dataViewManager.CheckedRecords.Count > 0)
            width = 50;
        else
            width = Math.Min(DetailSettings.MaximumNumberOfDetails, _dataViewManager.CheckedRecords.Count) * DetailSettings.DetailsWidth;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.DetailsChanged -= DetailsChanged;
        _dataViewManager.DetailsExpandChanged -= DetailsExpandChanged;
    }
}