@using DataSource;
@using DataViews;
@using FinancesBlazor.Components.Details.Cells;
@using FinancesBlazor.Components.Spinner
@inject DataViewManager _dataViewManager;
@implements IDisposable;

@if (DataView?.IsSaving != false)
{
    <Spinner></Spinner>
}
else
{
    <div>
        <button class="btn btn-primary" @onclick="Save">Zapisz</button>
        <button class="btn btn-primary" @onclick="Select"> <RadzenCheckBox TValue="bool" class="checkbox" Value=@Row.SelectedInDetails/></button>
        <button class="btn btn-primary" @onclick="Close">X</button>
        @foreach (var column in DataView.Columns.Where(c => c.Visible))
        {
            <DynamicCell DataView=@DataView Row=@Row Column=column></DynamicCell>
        }
    </div>   
}

@code {
    [Parameter]
    public DataView? DataView { get; set; }

    [Parameter]
    public DataRow? Row { get; set; }

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;

    }

    void ViewChanged(object? sender, DataView e)
    {
        if (DataView != e)
            return;
        StateHasChanged();
    }

    private void Select() => Row!.SelectedInDetails = !Row.SelectedInDetails;
    private async Task Save()
    {
        await _dataViewManager.SaveChanges(DataView, Row);
    }

    private void Close()
    {
        if (DataView == null || Row == null)
            return;
        _dataViewManager.SelectedData.Remove(Row);
        _dataViewManager.Save(DataView);
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }
}
