@using DataSource;
@using DataViews;
@using FinancesBlazor.Components.Details.Rows;
@implements IDisposable;
@inject DataViewManager _dataViewManager;

<button class="btn btn-primary" @onclick="DetailsCollapse">+</button> 
<button class="btn btn-primary" @onclick="Group">Group</button>
<div class="d-flex flex-nowrap" style="@GetStyle()">
    @foreach (var checkedRecordKey in _dataViewManager.SelectedData.Ids.Keys)
    {
        <DynamicRow DataView=@_dataViewManager.SelectedData.Ids[checkedRecordKey] Row=@GetRow(_dataViewManager.SelectedData.Ids[checkedRecordKey],checkedRecordKey)></DynamicRow>
    }
</div>

@code {
    private Dictionary<string, DataView?> _details = new();
    private DataRow? GetRow(DataView? dv, string id) => dv?.Result?.GetById(id);

    private string GetStyle()
    {
        var result = $"overflow-x:{(_dataViewManager.SelectedData.Ids.Count <= DetailSettings.MaximumNumberOfDetails ? "hidden" : "auto")};display:{(_dataViewManager.SelectedData.DetailsCollapsed ? "none!important" : "block")}";
        return result;
    }

    protected override void OnInitialized()
    {
        //  _dataViewManager.ViewChanged += ViewChanged;
        //  _dataViewManager.SelectedData.Changed += SelectedDataChanged;
    }

    public async Task LoadDetails()
    {
        _details = _dataViewManager.SelectedData.Ids.Keys.ToDictionary(k => k, v => (DataView?)null);
        await LoadDataIntoSelectedDetails();
        StateHasChanged();
    }

    // async void ViewChanged(object? sender, DataView e)
    // {
    // }

    private async Task LoadDataIntoSelectedDetails()
    {        
        foreach (var group in _dataViewManager.SelectedData.Ids.GroupBy(cr => cr.Value))
        {
            var dv = group.Key;
            var newIds = group.Select((k, v) => k.Key).ToList();
            // var oldIds = dv.Query.IdFilters;
            // var removedIds = oldIds.Except(newIds);
            // var addedIds = newIds.Except(oldIds);
            dv.Query.PageSize = -1; //Return all details, no matter how many of them there is.
            dv.Query.IdFilters.Clear();
            dv.Query.IdFilters.AddRange(newIds);
            await dv.Requery(preservePrevious: true); //Do not reload details that were already loded (changes made would be lost).
        }
    }

    private void DetailsCollapse()
    {
        _dataViewManager.SelectedData.DetailsCollapsed = !_dataViewManager.SelectedData.DetailsCollapsed;
        _dataViewManager.Save(_dataViewManager.ActiveView);
    }

    private void Group()
    {
        // TODO: Move this outside of component
        var id = string.Empty;
        foreach (var kvp in _dataViewManager.SelectedData.Ids)
        {
            var row = GetRow(kvp.Value, kvp.Key);
            if (row == null)
                continue;
            if (row.GroupId != null)
            {
                if (id == string.Empty)
                    id = row.GroupId.CurrentValue as string;
                //TODO: If two different groups are marked, need to inform user that two groups cannot be merged.
            }
        }
        if (id == string.Empty)
            id = Guid.NewGuid().ToString();
        foreach (var kvp in _dataViewManager.SelectedData.Ids)
        {
            var row = GetRow(kvp.Value, kvp.Key);
            if (row == null || row.GroupId == null || !row.SelectedInDetails)
                continue;
            row.GroupId.CurrentValue = id;
            
        }

    }

    void IDisposable.Dispose()
    {
        // _dataViewManager.ViewChanged -= ViewChanged;
        // _dataViewManager.SelectedData.Changed -= SelectedDataChanged;
    }

  //  async void SelectedDataChanged(object? sender, EventArgs e) => StateHasChanged();

}
