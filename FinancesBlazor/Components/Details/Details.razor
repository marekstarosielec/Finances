@using DataSource;
@using DataView;
@using FinancesBlazor.Components.Details.Rows;
@implements IDisposable;
@inject DataViewManager _dataViewManager;

@* <button class="btn btn-primary" @onclick="() => Test()">Test</button> *@
<div class="d-flex flex-nowrap">
    @foreach (var checkedRecordKey in _dataViewManager.CheckedRecords.Keys)
    {
        <DynamicRow DataView=@_dataViewManager.CheckedRecords[checkedRecordKey] Row=@GetRow(_dataViewManager.CheckedRecords[checkedRecordKey],checkedRecordKey)></DynamicRow>
    }
</div>
@code {
    private Dictionary<string, DataView?> _details = new();

    private DataRow? GetRow(DataView? dv, string id) => dv?.Result?.GetById(id);
    // private Dictionary<string, DataView?> _visibleDetails
    // {
    //     get
    //     {
    //         if (_details == null || DataView == null)
    //             return new();
    //         var startingIndex = Math.Min(DataView.DetailsIndex, _details.Count - DetailSettings.MaximumNumberOfDetails);
    //         if (startingIndex < 0)
    //             startingIndex = 0;
    //         return _details.Skip(startingIndex).Take(DetailSettings.MaximumNumberOfDetails).ToDictionary(k => k.Key, v => v.Value);
    //     }
    // }

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        _details = _dataViewManager.CheckedRecords.Keys.ToDictionary(k => k, v => (DataView?)null);
        foreach (var group in _dataViewManager.CheckedRecords.GroupBy(cr => cr.Value))
        {
            var ids = group.Select((k, v) => k.Key).ToList();
            group.Key.Query.IdFilters.Clear();
            group.Key.Query.IdFilters.AddRange(ids);
            await group.Key.Requery();
        }
    }

    async void ViewChanged(object? sender, DataView e)
    {
    }



    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }

}
