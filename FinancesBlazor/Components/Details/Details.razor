@using DataSource;
@using DataViews;
@using FinancesBlazor.Components.Details.Rows;
@implements IDisposable;
@inject DataViewManager _dataViewManager;

<button class="btn btn-primary" @onclick="DetailsCollapse">+</button> 
<button class="btn btn-primary" @onclick="Group">Group</button>
<div class="d-flex flex-nowrap" style="@GetStyle()">
    @foreach (var checkedRecordKey in _dataViewManager.SelectedData.Records.Keys)
    {
        <DynamicRow DataView=@_dataViewManager.SelectedData.Records[checkedRecordKey] Row=@GetRow(_dataViewManager.SelectedData.Records[checkedRecordKey],checkedRecordKey)></DynamicRow>
    }
</div>

@code {
    private Dictionary<string, DataView?> _details = new();
    private DataRow? GetRow(DataView? dv, string id) => dv?.Result?.GetById(id);

    private string GetStyle()
    {
        var result = $"overflow-x:{(_dataViewManager.SelectedData.Records.Count <= DetailSettings.MaximumNumberOfDetails ? "hidden" : "auto")};display:{(_dataViewManager.SelectedData.DetailsCollapsed ? "none!important" : "block")}";
        return result;
    }

    protected override void OnInitialized()
    {
        //  _dataViewManager.ViewChanged += ViewChanged;
        //  _dataViewManager.SelectedData.Changed += SelectedDataChanged;
    }

    public async Task LoadDetails()
    {
        _details = _dataViewManager.SelectedData.Records.Keys.ToDictionary(k => k, v => (DataView?)null);
        await LoadDataIntoSelectedDetails();
        StateHasChanged();
    }

    // async void ViewChanged(object? sender, DataView e)
    // {
    // }

    private async Task LoadDataIntoSelectedDetails()
    {        
        foreach (var group in _dataViewManager.SelectedData.Records.GroupBy(cr => cr.Value))
        {
            var dv = group.Key;
            var newIds = group.Select((k, v) => k.Key).ToList();
            // var oldIds = dv.Query.IdFilters;
            // var removedIds = oldIds.Except(newIds);
            // var addedIds = newIds.Except(oldIds);
            dv.Query.PageSize = -1; //Return all details, no matter how many of them there is.
            dv.Query.IdFilters.Clear();
            dv.Query.IdFilters.AddRange(newIds);
            await dv.Requery(preservePrevious: true); //Do not reload details that were already loded (changes made would be lost).
        }
    }

    private void DetailsCollapse()
    {
        _dataViewManager.SelectedData.DetailsCollapsed = !_dataViewManager.SelectedData.DetailsCollapsed;
        _dataViewManager.Save(_dataViewManager.ActiveView);
    }

    private async void Group()
    {
        // TODO: Move this outside of component
        var allSelectedDataRows = _dataViewManager.SelectedData.Records.Select(r => GetRow(r.Value, r.Key)).ToList();

        //Check if we are connecting to existing group or creating new one.
        var groupId = string.Empty;

        //TODO: GroupId does not exist anymore - need to check other way if is attached to group or add GroupId.
        var allGroupIds = allSelectedDataRows.Where(dr => dr?.GroupId?.CurrentValue != null).ToList();
        //if no groupId generate new
        if (allGroupIds.Count == 0)
            groupId = Guid.NewGuid().ToString();
        //if 1 groupId, reuse it (attach to existing group)
        if (allGroupIds.Count == 1)
            groupId = allGroupIds.First()!.GroupId!.CurrentValue as string;
        //if more than 1 groupId throw error (cannot merge 2 groups)
        if (allGroupIds.Count > 1)
            return;

        //Create rows that need to be added into group dataSource.
        var dataRowsToAdd = new List<DataRow>();
        foreach (var selectedDataRow in allSelectedDataRows)
        {
            if (selectedDataRow?.GroupId?.CurrentValue != null)
                continue; //No need to update records which are already in group.
            var groupDataRow = new DataRow();
            groupDataRow["Id"] = new DataValue(null, Guid.NewGuid().ToString());
            groupDataRow["GroupId"] = new DataValue(null, groupId);
            //Find view related to given detail
            groupDataRow["DataViewName"] = new DataValue(null, _dataViewManager.SelectedData.Records[selectedDataRow.Id.CurrentValue as string].Name);
            groupDataRow["RowId"] = new DataValue(null, selectedDataRow.Id.CurrentValue as string);
            groupDataRow["DocumentNumber"] = new DataValue(null, selectedDataRow.ContainsKey("Number") ? selectedDataRow["Number"].OriginalValue : null);
            dataRowsToAdd.Add(groupDataRow);
        }
        await _dataViewManager.SaveChanges(_dataViewManager.DataViews.FirstOrDefault(dv => dv.Name == "gr"), dataRowsToAdd);
    }

    void IDisposable.Dispose()
    {
        // _dataViewManager.ViewChanged -= ViewChanged;
        // _dataViewManager.SelectedData.Changed -= SelectedDataChanged;
    }

  //  async void SelectedDataChanged(object? sender, EventArgs e) => StateHasChanged();

}
