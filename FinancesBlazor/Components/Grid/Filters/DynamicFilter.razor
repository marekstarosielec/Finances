@using FinancesBlazor.ViewManager;
@using FinancesBlazor.DataAccess;
@using FinancesBlazor.DataTypes;

@inject ViewManager _viewManager;

@if (Column != null)
{
    <div class="outer">
        <div class="text-end">
            <button type="button" class="btn btn-primary btn-sm m-0 yellow" @onclick="() => SortClick(false)"><span class="fa fa-arrow-up"></span></button>
            <button type="button" class="btn btn-primary btn-sm m-0 blue" @onclick="() => SortClick(true)"><span class="fa fa-arrow-down"></span></button>
        </div>
        @* <DynamicComponent Type="@typeof({COMPONENT})" @ref="dc" /> *@
        @switch (Column.DataType)
        {
            case DataTypesList.Text:
                <TextFilter Column="@Column" ParametersChanged="FilterChanged" @ref=textFilter />
                break;
            case DataTypesList.Date:
                <DateFilter Column="@Column" ParametersChanged="FilterChanged" @ref=dateFilter />
                break;
            case DataTypesList.Precision:
                <PrecisionFilter Column="@Column" @ref=precisionFilter />
                break;
        }
    </div>
}
@code {

    TextFilter? textFilter;
    DateFilter? dateFilter;
    PrecisionFilter? precisionFilter;

    [Parameter]
    public Column? Column { get; set; }

    [Parameter]
    public EventCallback<bool> ParametersChanged { get; set; }

    public async Task OnOpen()
    {
        switch (Column?.DataType)
        {
            case DataTypesList.Text:
                if (textFilter!=null) await textFilter.OnOpen();
                break;
            case DataTypesList.Date:
               // if (dateFilter != null) await dateFilter.OnOpen();
                break;
            case DataTypesList.Precision:
               // if (precisionFilter != null) await precisionFilter.OnOpen();
                break;
        }
    }

    public async Task SortClick(bool descending)
    {
        if (Column == null || _viewManager?.ActiveView?.Parameters == null)
            return;

        _viewManager.ActiveView.Parameters.SortingColumnDataName = Column.Data;
        _viewManager.ActiveView.Parameters.SortingDescending = descending;
        await ParametersChanged.InvokeAsync(true);
    }

    public async Task FilterChanged(bool closeFilters)
    {
        await ParametersChanged.InvokeAsync(closeFilters);
    }
}
