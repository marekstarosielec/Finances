@using DataView;
@using Radzen.Blazor.Rendering;

@inject DataViewManager _dataViewManager;

@if (DataView != null && Column != null)
{
    <div class="outer">
        <div class="d-flex justify-content-between">
            <div>
                <button type="button" class="btn btn-primary btn-sm m-0 yellow" @onclick="() => SortClick(false)"><span class="fa fa-arrow-up"></span></button>
                <button type="button" class="btn btn-primary btn-sm m-0 blue" @onclick="() => SortClick(true)"><span class="fa fa-arrow-down"></span></button>
            </div>
            <button type="button" class="text-end btn btn-primary btn-sm m-0" @onclick="RemoveFilter"><span class="fa-solid fa-xmark"></span></button>
        </div>
        @if (Column.PreferredFilterComponentType != null)
        {
            <DynamicComponent Type="@(GetFilterComponent(Column.PreferredFilterComponentType))" Parameters="@(new Dictionary<string, object?>() { { "DataView", @DataView }, { "Column", @Column}, { "Popup", @Popup}, { "ElementReference", @ElementReference} })" />
        }
    </div>
}
@code {
    [Parameter]
    public DataView? DataView { get; set; }

    [Parameter]
    public DataViewColumn? Column { get; set; }

    [Parameter]
    public Popup? Popup { get; set; }

    [Parameter]
    public ElementReference? ElementReference { get; set; }

    public async Task RemoveFilter()
    {
        if (DataView == null || Column == null)
            return;

        if (Popup != null && ElementReference != null)
            await Popup.CloseAsync(ElementReference.Value);

        DataView.Query.Filters.Remove(Column);

        await _dataViewManager.Save(DataView);
    }

    public async Task SortClick(bool descending)
    {
        if (DataView == null || Column == null)
            return;

        if (Popup != null && ElementReference != null)
            await Popup.CloseAsync(ElementReference.Value);

        DataView.Query.Sorters.Clear();
        DataView.Query.Sorters.Add(Column, descending);
        await _dataViewManager.Save(DataView);
    }

    private Type GetFilterComponent(string filterComponentName)
    {
        switch (Column?.DataType)
        {
            case DataViewColumnDataType.Date:
                if (!Enum.TryParse<DataViewColumnDateFilterComponents>(filterComponentName, out var dateResult))
                    throw new InvalidOperationException($"Unknown filter component {filterComponentName} for type {Column?.DataType}");
                return dateResult switch
                {
                    DataViewColumnDateFilterComponents.Default => typeof(DateFilter),
                    _ => throw new InvalidOperationException($"Unknown filter component {filterComponentName} for type {Column?.DataType}")
                };
            case DataViewColumnDataType.Text:
                if (!Enum.TryParse<DataViewColumnTextFilterComponents>(filterComponentName, out var textResult))
                    throw new InvalidOperationException($"Unknown filter component {filterComponentName} for type {Column?.DataType}");
                return textResult switch
                {
                    DataViewColumnTextFilterComponents.Default => typeof(TextFilter),
                    _ => throw new InvalidOperationException($"Unknown filter component {filterComponentName} for type {Column?.DataType}")
                };
            default: throw new InvalidOperationException($"Unknown filter component {filterComponentName} for type {Column?.DataType}");
        };
    }

    
}
