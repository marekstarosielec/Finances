@* @using FinancesBlazor.DataTypes.DataTypeDefinition;
@using FinancesBlazor.ViewManager;
@using System.Timers;
@inject ViewManager _viewManager;
@inject IJSRuntime JSRuntime
@implements IDisposable;

@if (Column != null)
{
    <input type="text" id="search" aria-label="@Column.Title" aria-describedby="@Column.Title" @oninput="(e) => TextChanged(e)" @onkeydown="(e) => KeyDown(e)" value="@currentText" />
}

@code {
    [Parameter]
    public DataTypeDefinitionBase? Column { get; set; }

    public string currentText = string.Empty;

    private Timer debounce = new Timer(500);

    [Parameter]
    public EventCallback<bool> ParametersChanged { get; set; }

    protected override void OnInitialized()
    {
        if (Column != null && _viewManager?.ActiveView?.Parameters?.Filters.ContainsKey(Column) == true)
            currentText = _viewManager?.ActiveView?.Parameters?.Filters?[Column]?.StringValue;
        debounce.Elapsed += TimerCallback;
        base.OnInitialized();
    }

    private async void KeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "Escape")
            await ParametersChanged.InvokeAsync(true);
    }

    private void TextChanged(ChangeEventArgs e)
    {
        currentText = e.Value?.ToString() ?? string.Empty;
        debounce.Stop();
        debounce.Start();
    }

    private async void TimerCallback(Object? source, ElapsedEventArgs e)
    {
        debounce.Stop();
        if (_viewManager?.ActiveView?.Parameters?.Filters == null || Column == null)
            return;
        _viewManager.ActiveView.Parameters.Filters[Column] = new FilterValue { StringValue = currentText };
        
        await InvokeAsync(async () =>
        {
            await ParametersChanged.InvokeAsync();
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        debounce.Elapsed -= TimerCallback;
        debounce.Dispose();
    }

    public async Task OnOpen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }
}
 *@