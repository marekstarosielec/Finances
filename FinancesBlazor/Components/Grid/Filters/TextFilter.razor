@using FinancesBlazor.PropertyInfo;
@using FinancesBlazor.ViewManager;
@using System.Timers;
@using Radzen.Blazor.Rendering;
@inject ViewManager _viewManager;
@inject IJSRuntime JSRuntime
@implements IDisposable;

@if (Property != null)
{
    <input type="text" id="search" aria-label="@Property.Title" aria-describedby="@Property.Title" @oninput="TextChanged" @onkeydown="KeyDown" value="@currentText" />
}

@code {
    [Parameter]
    public View? View { get; set; }

    [Parameter]
    public PropertyInfoBase? Property { get; set; }

    [Parameter]
    public Popup? Popup { get; set; }

    [Parameter]
    public ElementReference? ElementReference { get; set; }


    public string? currentText = string.Empty;

    private Timer debounce = new Timer(500);

    protected override void OnInitialized()
    {
        if (Property != null && View?.Filters?.ContainsKey(Property) == true)
            currentText = View?.Filters?[Property]?.StringValue;
        debounce.Elapsed += TimerCallback;
        base.OnInitialized();
    }

    private async void KeyDown(KeyboardEventArgs e)
    {
        // if (e.Code == "Enter" || e.Code == "Escape")
        //     await ParametersChanged.InvokeAsync(true);
    }

    private void TextChanged(ChangeEventArgs e)
    {
        currentText = e.Value?.ToString() ?? string.Empty;
        debounce.Stop();
        debounce.Start();
    }

    private async void TimerCallback(Object? source, ElapsedEventArgs e)
    {
        debounce.Stop();
        if (View?.Filters == null || Property == null)
            return;
        View.Filters[Property] = new FilterInfoBase { StringValue = currentText };
        
        await InvokeAsync(async () =>
        {
            await _viewManager.Save(View);
        });
    }

    void IDisposable.Dispose()
    {
        debounce.Elapsed -= TimerCallback;
        debounce.Dispose();
    }

    public async Task OnOpen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }
}
