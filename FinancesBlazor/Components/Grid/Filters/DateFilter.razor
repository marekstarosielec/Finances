@using DataView;
@using FinancesBlazor.Extensions;
@using System.Globalization;
@using Radzen.Blazor.Rendering;

@inject DataViewManager _dataViewManager;
@implements IDisposable;

<DateRangePicker Inline="true" AutoApply="true" LinkedCalendars="true" CustomDayNames="CustomDayNames" OnRangeSelect="OnRangeSelect" StartDate="DateFrom" EndDate="DateTo" />
<button class="btn btn-primary" @onclick="() => SetPreviousMonth()">@PreviousMonthName</button>
<button class="btn btn-primary" @onclick="() => SetCurrentMonth()">@CurrentMonthName</button>
<button class="btn btn-primary float-end" @onclick="() => SetPreviousYear()">@PreviousYearName</button>
<button class="btn btn-primary float-end" @onclick="() => SetCurrentYear()">@CurrentYearName</button>
@code {
    [Parameter]
    public DataView? DataView { get; set; }

    [Parameter]
    public DataViewColumn? Column { get; set; }

    [Parameter]
    public Popup? Popup { get; set; }

    [Parameter]
    public ElementReference? ElementReference { get; set; }

    private DateTimeOffset? DateFrom;
    private DateTimeOffset? DateTo;

    private List<string> CustomDayNames = new List<string> { "P", "W", "Ś", "Cz", "Pt", "S", "N" };
    private static CultureInfo _pl = new CultureInfo("pl");
    private string PreviousMonthName = DateTime.Today.AddMonths(-1).ToString("MMMM yyyy", _pl).MakeFirstLetterUppercase();
    private string CurrentMonthName = DateTime.Today.ToString("MMMM yyyy", _pl).MakeFirstLetterUppercase();
    private string PreviousYearName = DateTime.Today.AddYears(-1).ToString("yyyy", _pl);
    private string CurrentYearName = DateTime.Today.ToString("yyyy", _pl);

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
    }

    public async void OnRangeSelect(DateRange range)
    {
        await SetDates(range.Start.DateTime, range.End.DateTime);
    }

    async void SetPreviousMonth()
    {
        var today = DateTime.Today;
        await SetDates(today.PreviousMonthFirstDay(), today.PreviousMonthLastDay());
    }

    async void SetCurrentMonth()
    {
        var today = DateTime.Today;
        await SetDates(today.CurrentMonthFirstDay(), today.CurrentMonthLastDay());
    }

    async void SetPreviousYear()
    {
        var today = DateTime.Today;
        await SetDates(today.PreviousYearFirstDay(), today.PreviousYearLastDay());
    }

    async void SetCurrentYear()
    {
        var today = DateTime.Today;
        await SetDates(today.CurrentYearFirstDay(), today.CurrentYearLastDay());
    }

    private async Task SetDates(DateTime from, DateTime to)
    {
        if (DataView?.Query.Filters == null || Column == null)
            return;

        if (Popup != null && ElementReference != null)
            await Popup.CloseAsync(ElementReference.Value);

        var today = DateTime.Today;
        DataView.Query.Filters[Column] = new DataViewColumnFilter { DateFrom = from, DateTo = to };
        await _dataViewManager.Save(DataView);
    }

    void ViewChanged(object? sender, DataView e)
    {
        if (DataView != e)
            return;

        //Set previously selected filter vaule in date picker (after renavigating to grid).
        if (Column != null && DataView?.Query.Filters.ContainsKey(Column) == true)
        {
            DateFrom = DataView?.Query.Filters?[Column]?.DateFrom;
            DateTo = DataView?.Query.Filters?[Column]?.DateTo;
        }

        //StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }
}
