@using FinancesBlazor.ViewManager;
@using FinancesBlazor.Components.Grid.Filters;
@using System.Text.Json.Nodes;
@using Radzen.Blazor.Rendering;

<button class="btn btn-primary" @onclick="() => ReloadDataRequest()"><span class="fa fa-refresh"></span></button>

@if (Parameters?.Columns != null && Data != null)
{
<table class="table">
    <thead>
        <tr>
            @foreach (var column in Parameters.Columns)
            {
                <th>
                    <div class="@(column.Align == Align.Right ? "text-end dropdown" : "dropdown")">
                        <button class="btn columnHeader" type="button" @ref=columnHeaders[column] @onclick="@(args => columnFilters[column].ToggleAsync(columnHeaders[column]))">@column.Title <span hidden="@ColumnHeaderArrowHidden(column, true)"><span class="fa fa-arrow-down"></span></span><span hidden="@ColumnHeaderArrowHidden(column, false)"><span class="fa fa-arrow-up"></span></span></button>
                            <Popup @ref=columnFilters[column] Lazy=false Open="@(() => OnOpen(column))" class="popup" Style="display:none;position:absolute;padding:5px;background-color:var(--bs-gray);border:1px">
                                <DynamicFilter Column=column ParametersChanged="ReloadDataRequest" @ref=dynamicFilters[column] />
                        </Popup>
                    </div>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Data)
        {
            <tr>
                @foreach (var column in Parameters.Columns)
                {
                    <td class="@(column.Align == Align.Right ? "text-end" : "")">@GridValueFormatter.GetFormattedString(@row?[column.Data], column)</td>
                }
            </tr>
        }
    </tbody>
</table>
}
@code {
    Dictionary<Column, ElementReference> columnHeaders = new();
    Dictionary<Column, Popup> columnFilters = new();
    Dictionary<Column, DynamicFilter> dynamicFilters = new();

    [Parameter]
    public ViewListParameters? Parameters { get; set; }

    [Parameter]
    public List<JsonNode>? Data { get; set; }

    [Parameter]
    public EventCallback ReloadDataRequested { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataRequest();
    }

    private async Task CloseFilter()
    {
        foreach (var kvp in columnFilters)
            await kvp.Value.CloseAsync();
    }

    private bool ColumnHeaderArrowHidden(Column column, bool descending) => Parameters?.SortingColumnDataName != column.Data || Parameters.SortingDescending != descending;

    private async Task ReloadDataRequest(bool closeFilters = true)
    {
        if( closeFilters) await CloseFilter();
        await ReloadDataRequested.InvokeAsync();
    }

    async Task OnOpen(Column column)
    {
        await dynamicFilters[column].OnOpen();
        //@inject IJSRuntime JSRuntime
       // await JSRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }
}
