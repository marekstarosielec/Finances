@using FinancesBlazor.PropertyInfo;
@using FinancesBlazor.ViewManager;
@using FinancesBlazor.Components.Grid.Filters;
@using System.Text.Json.Nodes;
@using Radzen.Blazor.Rendering;
@inject ViewManager _viewManager;
@implements IDisposable;

<div class="toolbar">
    <button class="btn btn-primary" @onclick="() => ReloadDataRequest()"><span class="fa fa-refresh"></span></button>
    <button class="btn btn-primary" @onclick="() => RequestFilterClear()"><span class="fa-layers fa-fw"><i class="fa fa-filter"></i><i class="fa-solid fa-xmark fa-lg red"></i></span></button>
</div>

@if (View?.Properties != null)
{
    <table class="table table-borderless">
        <thead>
            <tr>
                @foreach (var property in View.Properties)
                {
                    <th>
                        <div class="@(property.HorizontalAlign == ContentAlign.Right ? "text-end dropdown" : "dropdown")">
                            <button class="btn columnHeader" type="button" @ref=_popupInvokers[property] @onclick="@(args => _popups[property].ToggleAsync(_popupInvokers[property]))">@property.Title <span hidden="@ColumnHeaderArrowHidden(property, true)"><span class="fa fa-arrow-down blue"></span></span><span hidden="@ColumnHeaderArrowHidden(property, false)"><span class="fa fa-arrow-up yellow"></span></span></button>
                            <Popup @ref=_popups[property] Lazy=false class="popup" Style="display:none;position:absolute;padding:5px;border:1px">
                                <DynamicFilter View=@View Property=property @ref=_dynamicFilters[property] Popup="@_popups[property]" ElementReference="@_popupInvokers[property]" />
                            </Popup>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (_data != null)
            {
                @foreach (var row in _data)
                {
                    <tr>
                        @foreach (var property in View.Properties)
                        {
                            <td class="@GetCellStyle(property)">@GridValueFormatter.GetFormattedString(row?[property.PropertyName], property)</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}
@code {
    private Dictionary<PropertyInfoBase, ElementReference> _popupInvokers = new();
    private Dictionary<PropertyInfoBase, Popup> _popups = new();
    private Dictionary<PropertyInfoBase, DynamicFilter> _dynamicFilters = new();

    [Parameter]
    public View? View { get; set; }

    private List<JsonNode?>? _data;

    private string GetCellStyle(PropertyInfoBase propertyInfo)
    {
        var result = "";
        if (propertyInfo.HorizontalAlign == ContentAlign.Right)
            result += "text-end ";
        if (propertyInfo.DataType == DataType.Date || propertyInfo.DataType == DataType.Precision)
            result += "text-nowrap ";
        return result;
    }

    protected override void OnInitialized()
    {
        _viewManager.ViewChanged += ViewChanged;
        if (View == null)
            return;
        ViewChanged(this, View);
    }


    private async Task CloseFilter()
    {
        foreach (var kvp in _popups)
            await kvp.Value.CloseAsync();
    }

    private bool ColumnHeaderArrowHidden(PropertyInfoBase property, bool descending) => View?.SortingColumnPropertyName != property.PropertyName || View?.SortingDescending != descending;

    private async void ReloadDataRequest()
    {
        if (View == null)
            return;
        await View.Service.Reload();
        _data = View.Service.Data;
        StateHasChanged();
    }

    private async void RequestFilterClear()
    {
        if (View == null || View?.Filters == null)
            return;

        View.Filters.Clear();
        await _viewManager.Save(View);
    }

    void ViewChanged(object? sender, View e)
    {
        _data = e.Service.Data;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _viewManager.ViewChanged -= ViewChanged;
    }
}
