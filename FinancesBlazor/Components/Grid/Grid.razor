@using FinancesBlazor.Components.Grid.Filters;

<button class="btn btn-primary" @onclick="ReloadData"><span class="fa fa-refresh"></span></button>

@if (Settings?.Columns == null || Data == null)
{
    
}
else
{
<table class="table">
    
    <thead>
        <tr>
            @foreach (var column in Settings.Columns)
            {
                @*     <th @onclick="@(()=>ColumnHeaderClick(@column))">
                            @column.Title <span hidden="@ColumnHeaderArrowHidden(column, true)"><span class="fa fa-arrow-down"></span></span><span hidden="@ColumnHeaderArrowHidden(column, false)"><span class="fa fa-arrow-up"></span></span>
                        <span hidden="@(ColumnFilterVisible != column.Data)" class="filter"><DynamicFilter Column="@column" /></span>
                    </th> *@
                    <th>
                        <div class="dropdown">
                            <button class="btn columnHeader" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @column.Title <span hidden="@ColumnHeaderArrowHidden(column, true)"><span class="fa fa-arrow-down"></span></span><span hidden="@ColumnHeaderArrowHidden(column, false)"><span class="fa fa-arrow-up"></span></span>
                            </button>
                            <div class="dropdown-menu columnFilter" aria-labelledby="dropdownMenuButton">
                                <DynamicFilter Column="@column" />
                            </div>
                        </div>
                    </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Data)
        {
            <tr>
                    @foreach (var column in Settings.Columns)
                    {
                        <td>@GridValueFormatter.GetFormattedString(@row.GetType()?.GetProperty(column.Data)?.GetValue(row), column)</td>
                    }
            </tr>
        }
    </tbody>
</table>
}
@code {
    [Parameter]
    public GridSettings? Settings { get; set; }

    [Parameter]
    public object[]? Data { get; set; }

    [Parameter]
    public string? ColumnFilterVisible { get; set; }

    [Parameter]
    public EventCallback ReloadDataRequested { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private void CloseFilter()
    {
        ColumnFilterVisible = string.Empty;
    }
    private async Task ColumnHeaderClick(GridColumn column)
    {
        if (ColumnFilterVisible == column.Data)
            CloseFilter();
        else
            ColumnFilterVisible = column.Data;
        // if (Settings == null)
        //     return;
        // if (Settings.SortingColumnDataName == column.Data)
        //     Settings.SortingDescending = !Settings.SortingDescending;
        // else
        // {
        //     Settings.SortingColumnDataName = column.Data;
        //     Settings.SortingDescending = false;
        // }
        // await ReloadData();
    }

    private bool ColumnHeaderArrowHidden(GridColumn column, bool descending) => Settings?.SortingColumnDataName != column.Data || Settings.SortingDescending != descending;

    private async Task ReloadData()
    {
        CloseFilter();
        await ReloadDataRequested.InvokeAsync();
    }
}
