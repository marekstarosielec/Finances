@using DataView;
@using FinancesBlazor.Components.Grid.Filters;
@using System.Text.Json.Nodes;
@using Radzen.Blazor.Rendering;
@inject DataViewManager _dataViewManager;
@implements IDisposable;

<div class="toolbar">
    <button class="btn btn-primary" @onclick="() => ReloadDataRequest()"><span class="fa fa-refresh"></span></button>
    <button class="btn btn-primary" @onclick="() => RemoveFilters()"><span class="fa-layers fa-fw"><i class="fa fa-filter"></i><i class="fa-solid fa-xmark fa-lg red"></i></span></button>
</div>

@if (DataView?.Columns != null)
{
    <table class="table table-borderless">
        <thead>
            <tr>
                @foreach (var column in DataView.Columns)
                {
                    <th>
                        <div class="@(column.HorizontalAlign == DataViewColumnContentAlign.Right ? "text-end dropdown" : "dropdown")">
                            <button class="btn columnHeader" type="button" @ref=_popupInvokers[column] @onclick="@(args => _popups[column].ToggleAsync(_popupInvokers[column]))">@column.Title <span hidden="@ColumnHeaderArrowHidden(column, true)"><span class="fa fa-arrow-down blue"></span></span><span hidden="@ColumnHeaderArrowHidden(column, false)"><span class="fa fa-arrow-up yellow"></span></span></button>
                            <Popup @ref=_popups[column] Lazy=false class="popup" Style="display:none;position:absolute;padding:5px;border:1px">
                                <DynamicFilter DataView=@DataView Column=column @ref=_dynamicFilters[column] Popup="@_popups[column]" ElementReference="@_popupInvokers[column]" />
                            </Popup>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (DataView?.Result?.Rows != null)
            {
                @foreach (var row in DataView.Result.Rows)
                {
                    <tr>
                        @foreach (var column in DataView?.Columns!)
                        {
                            <td>@row[DataView.Result.Columns.FirstOrDefault(c => c.ColumnName == column.PrimaryDataColumnName)]?.ToString()</td>
                            @* <td class="@GetCellStyle(row, column)">@TextValueFormatter.GetFormattedString(row, property)</td> *@
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}
@code {
    private Dictionary<DataViewColumn, ElementReference> _popupInvokers = new();
    private Dictionary<DataViewColumn, Popup> _popups = new();
    private Dictionary<DataViewColumn, DynamicFilter> _dynamicFilters = new();

    [Parameter]
    public DataView? DataView { get; set; }

    private List<JsonNode?>? _data;

    // private string GetCellStyle(JsonNode row, PropertyInfoBase propertyInfo)
    // {
    //     var result = string.Empty;
    //     if (propertyInfo == null)
    //         return result;

    //     if (propertyInfo.HorizontalAlign == ContentAlign.Right)
    //         result += "text-end ";
    //     if (propertyInfo.DataType == DataType.Date || propertyInfo.DataType == DataType.Precision)
    //         result += "text-nowrap ";
    //     if (propertyInfo.DataType == DataType.Money && row[propertyInfo.PropertyName]?.GetValue<decimal?>() > 0)
    //         result += "green ";
    //     if (propertyInfo.DataType == DataType.Money && row[propertyInfo.PropertyName]?.GetValue<decimal?>() < 0)
    //         result += "red ";
    //     return result;
    // }

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
        // if (DataView == null)
        //     return;
        // ViewChanged(this, DataView);
    }

    private async Task CloseFilters()
    {
        foreach (var kvp in _popups)
            await kvp.Value.CloseAsync();
    }

    private bool ColumnHeaderArrowHidden(DataViewColumn column, bool descending) => DataView?.Query.Sorters.ContainsKey(column) == false || DataView?.Query.Sorters[column] != descending;

    private async void ReloadDataRequest()
    {
        // if (View == null)
        //     return;
        // await CloseFilters();
        // await View.Service.Reload();
        // _data = View.Service.Data;
        // StateHasChanged();
    }

    private async void RemoveFilters()
    {
        if (DataView == null || DataView?.Query.Filters == null)
            return;

        DataView.Query.Filters.Clear();
        await _dataViewManager.Save(DataView);
    }

    async void ViewChanged(object? sender, DataView e)
    {
        if (DataView != e)
            return;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }
}
