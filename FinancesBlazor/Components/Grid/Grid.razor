@using DataView;
@using FinancesBlazor.Components.Grid.Filters;
@using System.Text.Json.Nodes;
@using FinancesBlazor.Components.Grid.Rows
@using FinancesBlazor.Components.Spinner;
@using Radzen.Blazor.Rendering;
@inject DataViewManager _dataViewManager;
@implements IDisposable;

@if (DataView?.IsLoading != false)
{
    <Spinner></Spinner>
}
else
{
    <Toolbar DataView=DataView></Toolbar>
    <table class="table table-borderless">
        <thead>
            <tr>
                @foreach (var column in DataView.Columns)
                {
                    <th>
                        <div class="@(column.HorizontalAlign == DataViewColumnContentAlign.Right ? "text-end dropdown" : "dropdown")">
                            <button class="btn columnHeader" type="button" @ref=_popupInvokers[column] @onclick="@(args => ToggleFilter(column))">@column.Title <span hidden="@ColumnHeaderArrowHidden(column, true)"><span class="fa fa-arrow-down blue"></span></span><span hidden="@ColumnHeaderArrowHidden(column, false)"><span class="fa fa-arrow-up yellow"></span></span></button>
                            <Popup @ref=_popups[column] Lazy=false class="popup" Style="display:none;position:absolute;padding:5px;border:1px">
                                <DynamicFilter DataView=@DataView Column=column @ref=_dynamicFilters[column] Popup="@_popups[column]" ElementReference="@_popupInvokers[column]" />
                            </Popup>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (DataView?.Result?.Rows != null)
            {
                @foreach (var row in DataView.Result.Rows)
                {
                    <DynamicRow DataView=@DataView Row=@row></DynamicRow>
                }
            }
        </tbody>
    </table>
    @if (DataView?.Result != null && DataView.Result.Rows?.Count() < DataView.Result.TotalRowCount)
    {
        <button class="btn btn-primary" @onclick="() => LoadMore()">Wczytaj więcej</button>
    }
}
@code {
    private Dictionary<DataViewColumn, ElementReference> _popupInvokers = new();
    private Dictionary<DataViewColumn, Popup> _popups = new();
    private Dictionary<DataViewColumn, DynamicFilter> _dynamicFilters = new();
    private Popup _prefilterPopup;
    private ElementReference _prefilterInvoker;

    [Parameter]
    public DataView? DataView { get; set; }

    private List<JsonNode?>? _data;

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
    }

    private void ToggleFilter(DataViewColumn column)
    {
        _popups[column].ToggleAsync(_popupInvokers[column]);
    }

    // private async Task CloseFilters()
    // {
    //     foreach (var kvp in _popups)
    //         await kvp.Value.CloseAsync();
    // }

    private async Task LoadMore()
    {
        if (DataView == null)
            return;

        DataView.Query.PageSize += 100;
        await _dataViewManager.Save(DataView);
    }

    private bool ColumnHeaderArrowHidden(DataViewColumn column, bool descending) 
        => DataView?.Query.Sorters.ContainsKey(column) == false || DataView?.Query.Sorters[column] != descending;

    async void ViewChanged(object? sender, DataView e)
    {
        if (DataView != e)
            return;
        StateHasChanged();
        await DataView.Requery();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }
}
