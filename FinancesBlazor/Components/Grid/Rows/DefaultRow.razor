@using DataSource;
@using DataView;
@using FinancesBlazor.Components.Grid.Cells;
@inject DataViewManager _dataViewManager;
@implements IDisposable;

<tr class="@(_checked ? "checked" : null)">
    <td><RadzenCheckBox TValue="bool" class="checkbox" Value=@_checked Change=@(args => CheckChange(args)) /></td>
    @foreach (var column in DataView?.Columns!)
    {
        <DynamicCell DataView=@DataView Row=@Row Column=column></DynamicCell>
    }
</tr>

@code {
    [Parameter]
    public DataView? DataView { get; set; }

    [Parameter]
    public Dictionary<DataColumn, object?>? Row { get; set; }

    private bool _checked;

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
        _checked = DataView?.RecordIsChecked(Row) ?? false;
    }

    private void CheckChange(bool args)
    {
        if (DataView == null)
            return;
        if (args)
            DataView.CheckRecord(Row);
        else
            DataView.UncheckRecord(Row);
        _checked = args;
        _dataViewManager.Save(DataView);
    }

    void ViewChanged(object? sender, DataView e)
    {
        if (DataView != e)
            return;
        _checked = DataView?.RecordIsChecked(Row) ?? false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
    }
}
