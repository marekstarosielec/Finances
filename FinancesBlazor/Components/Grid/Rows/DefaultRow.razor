@using DataSource;
@using DataViews;
@using FinancesBlazor.Components.Grid.Cells;
@inject DataViewManager _dataViewManager;
@implements IDisposable;

<tr class="@(_checked ? "checked" : null) @(IsDeleted() ? "deleted" : null)">
    @if (DataView?.Presentation?.ShowSelectionCheckboxesInList == true)
    {
        <td class="selectionCheckbox"><RadzenCheckBox TValue="bool" class="checkbox" Value=@_checked Change=@(args => CheckChange(args)) /></td>
    }
    @foreach (var column in DataView?.Columns!.Where(c => c.Visible)!)
    {
        <DynamicCell DataView=@DataView Row=@Row Column=column></DynamicCell>
    }
</tr>

@code {
    [Parameter]
    public DataView? DataView { get; set; }

    [Parameter]
    public DataRow? Row { get; set; }

    private bool _checked;

    protected override void OnInitialized()
    {
        _dataViewManager.ViewChanged += ViewChanged;
        _dataViewManager.SelectedData.Changed += SelectedDataChanged;

        if (DataView == null || Row == null)
            return;
        _checked = _dataViewManager.SelectedData.IsSelected(Row);
    }

    private async Task CheckChange(bool args)
    {
        if (DataView == null || Row == null)
            return;

        var detailsDataView = _dataViewManager.FindViewByName(DataView.GetDetailsDataViewName());

        if (args)
            _dataViewManager.SelectedData.Add(detailsDataView, Row);
        else
            _dataViewManager.SelectedData.Remove(Row);
        _checked = args;
        await _dataViewManager.Save(DataView);
    }

    void SelectedDataChanged(object? sender, EventArgs e)
    {
        if (DataView == null || Row == null)
            return;
        _checked = _dataViewManager.SelectedData.IsSelected(Row);
        StateHasChanged();
    }

    bool IsDeleted()
    {
        if (DataView == null || Row == null)
            return false;

        if (Row.ContainsKey("Deleted") && (Row["Deleted"].OriginalValue as bool?) == true) 
            return true;
        return false;

    }

    void ViewChanged(object? sender, DataView e)
    {
        // if (DataView != e)
        //     return;
        // _checked = _dataViewManager.SelectedData.IsSelected(Row);
        // StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        _dataViewManager.ViewChanged -= ViewChanged;
        _dataViewManager.SelectedData.Changed -= SelectedDataChanged;
    }
}
